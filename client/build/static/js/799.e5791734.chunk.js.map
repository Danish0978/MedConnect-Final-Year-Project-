{"version":3,"file":"static/js/799.e5791734.chunk.js","mappings":"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","sources":["components/ReceptionistBookAppointment.jsx","components/DoctorCard.jsx","pages/Doctors.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport { IoMdClose } from \"react-icons/io\";\r\nimport \"../styles/receptionistBooking.css\";\r\n\r\nconst ReceptionistBookAppointment = ({ doctor, onClose }) => {\r\n    const [formData, setFormData] = useState({\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      date: \"\",\r\n      time: \"\",\r\n    });\r\n  \r\n    const handleChange = (e) => {\r\n      setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n  \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n      \r\n        if (formData.password !== formData.confirmPassword) {\r\n          return toast.error(\"Passwords don't match\");\r\n        }\r\n      \r\n        try {\r\n\r\n          const doctorId = doctor?.userId?._id;\r\n          // Build the payload exactly as backend expects\r\n          const payload = {\r\n            doctorId, // Ensure we get the doctor ID\r\n            date: formData.date,\r\n            time: formData.time,\r\n            doctorname: `${doctor?.userId?.firstname || ''} ${doctor?.userId?.lastname || ''}`,\r\n            // Include ALL required fields at root level\r\n            firstname: formData.firstname,\r\n            lastname: formData.lastname,\r\n            email: formData.email,\r\n            password: formData.password,\r\n            // Also include patientDetails as backup\r\n            patientDetails: {\r\n              firstname: formData.firstname,\r\n              lastname: formData.lastname,\r\n              email: formData.email,\r\n              password: formData.password\r\n            }\r\n          };\r\n\r\n          const { data } = await axios.post(\r\n            \"/appointment/book-by-receptionist\",\r\n            payload,\r\n            { \r\n              headers: { \r\n                Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n                \"Content-Type\": \"application/json\"\r\n              } \r\n            }\r\n          );\r\n      \r\n          toast.success(\"Appointment booked successfully\");\r\n          onClose();\r\n        } catch (error) {\r\n          console.error(\"Full error:\", error);\r\n          console.error(\"Error response:\", error.response?.data);\r\n          toast.error(error.response?.data?.message || \"Booking failed. Please check all fields.\");\r\n        }\r\n      };\r\n  \r\n    const handleModalClose = (e) => {\r\n      if (e.target === e.currentTarget) {\r\n        onClose();\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"receptionist-modal-overlay\" onClick={handleModalClose}>\r\n        <div className=\"receptionist-booking-modal\" onClick={(e) => e.stopPropagation()}>\r\n          <div className=\"modal-header\">\r\n            <h2>Book Appointment for Patient</h2>\r\n            <button className=\"close-btn\" onClick={onClose}>\r\n              <IoMdClose size={24} />\r\n            </button>\r\n          </div>\r\n        <form onSubmit={handleSubmit} className=\"receptionist-form\">\r\n          <div className=\"form-group\">\r\n            <label>First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstname\"\r\n              value={formData.firstname}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastname\"\r\n              value={formData.lastname}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"confirmPassword\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <label>Date</label>\r\n              <input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                value={formData.date}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Time</label>\r\n              <input\r\n                type=\"time\"\r\n                name=\"time\"\r\n                value={formData.time}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-actions\">\r\n            <button type=\"button\" className=\"cancel-btn\" onClick={onClose}>\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"submit-btn\">\r\n              Book Appointment\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceptionistBookAppointment;","// DoctorCard.js (updated)\nimport \"../styles/doctorcard.css\";\nimport React, { useState } from \"react\";\nimport BookAppointment from \"../components/BookAppointment\";\nimport ReceptionistBookAppointment from \"../components/ReceptionistBookAppointment\";\nimport { toast } from \"react-hot-toast\";\nimport jwt_decode from \"jwt-decode\";\nimport { FaStar } from \"react-icons/fa\";\n\nconst DoctorCard = ({ ele }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || \"\");\n  const [user, setUser] = useState(\n    localStorage.getItem(\"token\")\n      ? jwt_decode(localStorage.getItem(\"token\"))\n      : \"\"\n  );\n  const [expanded, setExpanded] = useState(false);\n  const [showAllReviews, setShowAllReviews] = useState(false);\n\n  const handleModal = () => {\n    if (token === \"\") {\n      return toast.error(\"You must log in first\");\n    }\n    setModalOpen(true);\n  };\n  const toggleExpand = () => {\n    setExpanded(!expanded);\n  };\n  // Format timings for display\n  const formatTimings = (timings) => {\n    if (!timings || timings.length !== 2) return \"Not specified\";\n    const [start, end] = timings;\n    return `${start}:00 - ${end}:00`;\n  };\n\n  const toggleReviews = () => {\n    setShowAllReviews(!showAllReviews);\n  };\n\n  const displayedReviews = showAllReviews \n    ? ele.feedbacks \n    : ele.feedbacks?.slice(0, 2);\n\n  return (\n    <div className={`card`}>\n      <div className=\"card-img-container\">\n        <div className={`card-img flex-center`}>\n          <img\n            src={\n              ele?.userId?.pic ||\n              \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\"\n            }\n            alt=\"profile\"\n          />\n        </div>\n        {ele.averageRating && (\n          <div className=\"rating-badge\">\n            <FaStar className=\"star-icon filled\" />\n            <span>{ele.averageRating}</span>\n            {ele.totalReviews > 0 && (\n              <span className=\"review-count\">({ele.totalReviews})</span>\n            )}\n          </div>\n        )}\n      </div>\n\n      <h3 className=\"card-name\">\n        Dr. {ele?.userId?.firstname + \" \" + ele?.userId?.lastname}\n      </h3>\n      <p className=\"specialization\">\n        <strong>Specialization: </strong>\n        {ele?.specialization}\n      </p>\n      <p className=\"experience\">\n        <strong>Experience: </strong>\n        {ele?.experience}yrs\n      </p>\n      <p className=\"fees\">\n        <strong>Fees per consultation: </strong>\n        Rs. {ele?.feePerConsultation}\n      </p>\n      <p className=\"clinic\">\n        <strong>Clinic: </strong>\n        {ele?.clinicId?.name || \"Not specified\"}\n      </p>\n      <p className=\"clinic-address\">\n        <strong>Clinic Address: </strong>\n        {ele?.clinicId?.address || \"Not specified\"}\n      </p>\n      <p className=\"clinic\">\n        <strong>Clinic Phone: </strong>\n        {ele?.clinicId?.contact?.phone || \"Not specified\"}\n      </p>\n      <p className=\"clinic\">\n        <strong>Clinic Email: </strong>\n        {ele?.clinicId?.contact?.email || \"Not specified\"}\n      </p>\n\n      {/* Availability Section */}\n      <div className=\"availability\">\n        <h4>Availability</h4>\n        {Object.entries(ele?.availability || {}).map(([day, value]) => {\n          if (value.isAvailable) {\n            return (\n              <div key={day} className=\"day-availability\">\n                <p className=\"day\">\n                  <strong>{day.charAt(0).toUpperCase() + day.slice(1)}:</strong>\n                  <span className=\"time\">\n                    {value.startTime} - {value.endTime}\n                  </span>\n                </p>\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n\n      {/* Reviews Section\n      {ele.feedbacks?.length > 0 && (\n        <div className=\"reviews-section\">\n          <h4>Patient Reviews</h4>\n          <div className=\"reviews-container\">\n            {displayedReviews.map((review, index) => (\n              <div key={index} className=\"review-item\">\n                <div className=\"review-header\">\n                  <span className=\"reviewer-name\">\n                    {review.patient?.firstname || 'Anonymous'}\n                  </span>\n                  <div className=\"review-rating\">\n                    {[...Array(5)].map((_, i) => (\n                      <FaStar \n                        key={i} \n                        className={`star-icon ${i < review.rating ? 'filled' : ''}`} \n                      />\n                    ))}\n                  </div>\n                </div>\n                {review.comment && (\n                  <p className=\"review-comment\">\"{review.comment}\"</p>\n                )}\n              </div>\n            ))}\n          </div>\n          {ele.feedbacks.length > 2 && (\n            <button className=\"toggle-reviews-btn\" onClick={toggleReviews}>\n              {showAllReviews ? 'Show Less' : `Show All (${ele.feedbacks.length})`}\n            </button>\n          )}\n        </div>\n      )} */}\n\n      <button className=\"btn appointment-btn\" onClick={handleModal}>\n        {user.isReceptionist ? \"Book for Patient\" : \"Book Appointment\"}\n      </button>\n\n      <span style={{ cursor: \"pointer\" }} className=\"reviews-btn\" onClick={toggleExpand}>\n  {expanded ? 'Hide Details' : 'View Reviews'}\n</span>\n\n{expanded && (\n  <div className=\"reviews-expanded\">\n    <h4>Patient Reviews</h4>\n    <div className=\"reviews-list\">\n      {ele.feedbacks?.length > 0 ? (\n        ele.feedbacks.map((review, index) => (\n          <div key={index} className=\"review-item\">\n            <div className=\"review-header\">\n              <span className=\"reviewer-name\">\n                {review.patient?.firstname || 'Anonymous'}\n              </span>\n              <div className=\"review-rating\">\n                {[...Array(5)].map((_, i) => (\n                  <FaStar\n                    key={i}\n                    className={`star-icon ${i < review.rating ? 'filled' : ''}`}\n                  />\n                ))}\n              </div>\n            </div>\n            {review.comment && (\n              <p className=\"review-comment\">\"{review.comment}\"</p>\n            )}\n          </div>\n        ))\n      ) : (\n        <p>No reviews yet.</p>\n      )}\n    </div>\n  </div>\n)}\n\n      {modalOpen && (\n        user.isReceptionist ? (\n          <ReceptionistBookAppointment \n            doctor={ele}\n            onClose={() => setModalOpen(false)}\n          />\n        ) : (\n          <BookAppointment setModalOpen={setModalOpen} doctor={ele} />\n        )\n      )}\n    </div>\n  );\n};\n\nexport default DoctorCard;","// Doctors.js (updated)\nimport React, { useEffect, useState } from \"react\";\nimport DoctorCard from \"../components/DoctorCard\";\nimport Footer from \"../components/Footer\";\nimport Navbar from \"../components/Navbar\";\nimport \"../styles/doctors.css\";\nimport fetchData from \"../helper/apiCall\";\nimport Loading from \"../components/Loading\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLoading } from \"../redux/reducers/rootSlice\";\nimport Empty from \"../components/Empty\";\nimport { toast } from \"react-hot-toast\";\nimport { FaSearch, FaStar } from \"react-icons/fa\";\n\nconst Doctors = () => {\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [ratingFilter, setRatingFilter] = useState(null);\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state) => state.root);\n\n  const fetchAllDocs = async () => {\n    dispatch(setLoading(true));\n    try {\n      const response = await fetchData(`/doctor/getalldoctors`);\n      if (response && response.success && Array.isArray(response.data)) {\n        setDoctors(response.data);\n        setFilteredDoctors(response.data);\n      } else {\n        console.error(\"Invalid data format:\", response);\n        toast.error(\"Failed to fetch doctors: Invalid data format\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching doctors:\", error);\n      toast.error(\"Failed to fetch doctors\");\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  useEffect(() => {\n    fetchAllDocs();\n  }, []);\n\n  // Filter doctors based on search term and rating\n  useEffect(() => {\n    let filtered = [...doctors];\n    \n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter((doctor) => {\n        const name = `${doctor.userId?.firstname || ''} ${doctor.userId?.lastname || ''}`.toLowerCase();\n        const specialization = doctor.specialization?.toLowerCase() || '';\n        const clinicName = doctor.clinicId?.name?.toLowerCase() || '';\n        const clinicAddress = doctor.clinicId?.address?.toLowerCase() || '';\n        const fee = doctor.feePerConsultation?.toString() || '';\n        const experience = doctor.experience?.toString() || '';\n\n        return (\n          name.includes(searchLower) ||\n          specialization.includes(searchLower) ||\n          clinicName.includes(searchLower) ||\n          clinicAddress.includes(searchLower) ||\n          fee.includes(searchLower) ||\n          experience.includes(searchLower)\n  )});\n    }\n\n    if (ratingFilter !== null) {\n      filtered = filtered.filter(doctor => \n        parseFloat(doctor.averageRating || 0) >= ratingFilter\n      );\n    }\n\n    setFilteredDoctors(filtered);\n  }, [searchTerm, ratingFilter, doctors]);\n\n  return (\n    <>\n      <Navbar />\n      {loading && <Loading />}\n      {!loading && (\n        <section className=\"container doctors\">\n          <h2 className=\"page-heading\">Our Doctors</h2>\n          \n          <div className=\"search-and-filter\">\n            {/* Search Bar */}\n            <div className=\"doctor-search-container\">\n              <div className=\"doctor-search-bar\">\n                <FaSearch className=\"search-icon\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by name, specialization, clinic, etc...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Rating Filter */}\n            <div className=\"rating-filter\">\n              <span>Filter by rating: </span>\n              {[4, 3, 2, 1].map((rating) => (\n                <button\n                  key={rating}\n                  className={`rating-btn ${ratingFilter === rating ? 'active' : ''}`}\n                  onClick={() => setRatingFilter(ratingFilter === rating ? null : rating)}\n                >\n                  {rating}+ <FaStar className=\"star-icon\" />\n                </button>\n              ))}\n              {ratingFilter && (\n                <button \n                  className=\"clear-filter\"\n                  onClick={() => setRatingFilter(null)}\n                >\n                  Clear\n                </button>\n              )}\n            </div>\n          </div>\n\n          {filteredDoctors.length > 0 ? (\n            <div className=\"doctors-card-container\">\n              {filteredDoctors.map((ele) => (\n                <DoctorCard ele={ele} key={ele._id} />\n              ))}\n            </div>\n          ) : (\n            <Empty />\n          )}\n        </section>\n      )}\n      <Footer />\n    </>\n  );\n};\n\nexport default Doctors;"],"names":["_ref","doctor","onClose","formData","setFormData","useState","firstname","lastname","email","password","confirmPassword","date","time","handleChange","e","target","name","value","_jsx","className","onClick","currentTarget","children","_jsxs","stopPropagation","IoMdClose","size","onSubmit","async","preventDefault","toast","error","_doctor$userId","_doctor$userId2","_doctor$userId3","payload","doctorId","userId","_id","doctorname","patientDetails","data","axios","post","headers","Authorization","localStorage","getItem","success","_error$response","_error$response2","_error$response2$data","console","response","message","type","onChange","required","_ele$feedbacks","_ele$userId","_ele$userId2","_ele$userId3","_ele$clinicId","_ele$clinicId2","_ele$clinicId3","_ele$clinicId3$contac","_ele$clinicId4","_ele$clinicId4$contac","_ele$feedbacks2","ele","modalOpen","setModalOpen","token","setToken","user","setUser","jwt_decode","expanded","setExpanded","showAllReviews","setShowAllReviews","feedbacks","slice","src","pic","alt","averageRating","FaStar","totalReviews","specialization","experience","feePerConsultation","clinicId","address","contact","phone","Object","entries","availability","map","_ref2","day","isAvailable","charAt","toUpperCase","startTime","endTime","handleModal","isReceptionist","style","cursor","toggleExpand","length","review","index","_review$patient","patient","Array","_","i","rating","comment","ReceptionistBookAppointment","BookAppointment","Doctors","doctors","setDoctors","filteredDoctors","setFilteredDoctors","searchTerm","setSearchTerm","ratingFilter","setRatingFilter","dispatch","useDispatch","loading","useSelector","state","root","useEffect","setLoading","fetchData","isArray","fetchAllDocs","filtered","searchLower","toLowerCase","filter","_doctor$specializatio","_doctor$clinicId","_doctor$clinicId$name","_doctor$clinicId2","_doctor$clinicId2$add","_doctor$feePerConsult","_doctor$experience","clinicName","clinicAddress","fee","toString","includes","parseFloat","_Fragment","Navbar","Loading","FaSearch","placeholder","DoctorCard","Empty","Footer"],"sourceRoot":""}