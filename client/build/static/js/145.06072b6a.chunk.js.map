{"version":3,"file":"static/js/145.06072b6a.chunk.js","mappings":"oOAOA,MA+PA,EA/PoBA,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,CAC7CK,eAAgB,GAChBC,WAAY,EACZC,mBAAoB,EACpBC,SAAU,GACVC,WAAY,GACZC,aAAc,CACZC,OAAQ,CAAEC,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACtDC,QAAS,CAAEH,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACvDE,UAAW,CAAEJ,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACzDG,SAAU,CAAEL,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACxDI,OAAQ,CAAEN,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACtDK,SAAU,CAAEP,aAAa,EAAOC,UAAW,GAAIC,QAAS,IACxDM,OAAQ,CAAER,aAAa,EAAOC,UAAW,GAAIC,QAAS,KAExDO,QAAS,CAAC,EAAG,OAIfC,EAAAA,EAAAA,YAAU,KACaC,WACnB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,cAAe,CAC9CC,QAAS,CACPC,cAAe,UAAUC,aAAaC,QAAQ,cAK9CN,EAASO,MAAQP,EAASO,KAAKC,SAAWC,MAAMC,QAAQV,EAASO,KAAKA,MACxE7B,EAAWsB,EAASO,KAAKA,OAEzBI,QAAQC,MAAM,8BAA+BZ,EAASO,MACtDM,EAAAA,GAAMD,MAAM,uDAEhB,CAAE,MAAOA,GACPD,QAAQC,MAAM,0BAA2BA,GACzCC,EAAAA,GAAMD,MAAM,0BACd,GAGFE,EAAc,GACb,IAGH,MAAMC,EAAeC,IACnB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BvC,GAAgBwC,IAAI,IACfA,EACH,CAACH,GAAOC,KACP,EAwBCG,EAA2BA,CAACC,EAAKC,EAAOL,KAC5CtC,GAAgBwC,IAAI,IACfA,EACHlC,aAAc,IACTkC,EAAKlC,aACR,CAACoC,GAAM,IACFF,EAAKlC,aAAaoC,GACrB,CAACC,GAAkB,gBAAVA,EAA0BL,EAAMC,OAAOK,QAAUN,OAG7D,EAwDL,OACEO,EAAAA,EAAAA,KAAA,WAASC,UAAU,mCAAkCC,UACvDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qCAAoCC,SAAA,EACjDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SAAC,uBAC7BC,EAAAA,EAAAA,MAAA,QAAMC,SAxDW9B,UACjBiB,EAAEc,iBACFvD,GAAW,GAEX,IAEE,MAAM,eAAEM,EAAc,WAAEC,EAAU,mBAAEC,EAAkB,SAAEC,EAAQ,aAAEE,EAAY,QAAEW,GAAYlB,EAC5F,IAAKE,IAAmBC,IAAeC,IAAuBC,IAAaa,EAEzE,YADAgB,EAAAA,GAAMD,MAAM,2BAYd,IAP4BmB,OAAOC,OAAO9C,GAAc+C,OAAOX,IACzDA,EAAIlC,aACCkC,EAAIjC,WAAaiC,EAAIhC,UAO9B,YADAuB,EAAAA,GAAMD,MAAM,mDAKd,MAAMsB,QAAYjC,EAAAA,EAAMkC,KACtB,mBACA,IACKxD,GAEL,CACEwB,QAAS,CACPC,cAAe,UAAUC,aAAaC,QAAQ,cAKhD4B,EAAI3B,KAAKC,SACXK,EAAAA,GAAML,QAAQ0B,EAAI3B,KAAK6B,SACvBhE,EAAS,MAETyC,EAAAA,GAAMD,MAAMsB,EAAI3B,KAAK6B,QAEzB,CAAE,MAAOxB,GAAQ,IAADyB,EAAAC,EACd3B,QAAQC,MAAM,yBAA0BA,GACxCC,EAAAA,GAAMD,OAAoB,QAAdyB,EAAAzB,EAAMZ,gBAAQ,IAAAqC,GAAM,QAANC,EAAdD,EAAgB9B,YAAI,IAAA+B,OAAN,EAAdA,EAAsBF,UAAW,uBAC/C,CAAC,QACC7D,GAAW,EACb,GAO4BmD,UAAU,gBAAeC,SAAA,EAEnDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEX,KAAK,aACLC,MAAOvC,EAAYM,WACnBsD,SAjGuBvB,IAC7B,MAAMwB,EAAqBxB,EAAEG,OAAOD,MAC9BuB,EAAiBhE,EAAQiE,MAAMC,GAAWA,EAAO1B,OAASuB,IAG9D5D,EADE6D,EACcrB,IAAI,IACfA,EACHpC,SAAUyD,EAAeG,IACzB3D,WAAYwD,EAAexB,OAGbG,IAAI,IACfA,EACHpC,SAAU,GACVC,WAAY,KAEhB,EAkFMyC,UAAU,aACVmB,UAAQ,EAAAlB,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQP,MAAM,GAAES,SAAC,oBAChBlD,EAAQqE,KAAKH,IACZlB,EAAAA,EAAAA,KAAA,UAAyBP,MAAOyB,EAAO1B,KAAKU,SACzCgB,EAAO1B,MADG0B,EAAOC,cAQ1BhB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,OACL9B,KAAK,iBACLS,UAAU,aACVsB,YAAY,4BACZ9B,MAAOvC,EAAYE,eACnB0D,SAAUxB,EACV8B,UAAQ,QAIZjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,SACL9B,KAAK,aACLS,UAAU,aACVsB,YAAY,iCACZ9B,MAAOvC,EAAYG,WACnByD,SAAUxB,EACV8B,UAAQ,QAIZjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,0BACPF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,SACL9B,KAAK,qBACLS,UAAU,aACVsB,YAAY,kCACZ9B,MAAOvC,EAAYI,mBACnBwD,SAAUxB,EACV8B,UAAQ,QAKZjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBACHI,OAAOkB,QAAQtE,EAAYO,cAAc4D,KAAII,IAAA,IAAE5B,EAAKJ,GAAMgC,EAAA,OACzDtB,EAAAA,EAAAA,MAAA,OAAeF,UAAU,mBAAkBC,SAAA,EACzCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,WACLrB,UAAU,gBACVF,QAASN,EAAM9B,YACfmD,SAAWvB,GAAMK,EAAyBC,EAAK,cAAeN,MAEhES,EAAAA,EAAAA,KAAA,SAAAE,SAAQL,EAAI6B,OAAO,GAAGC,cAAgB9B,EAAI+B,MAAM,QAEjDnC,EAAM9B,cACLwC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,OACLrB,UAAU,aACVR,MAAOA,EAAM7B,UACbkD,SAAWvB,GAAMK,EAAyBC,EAAK,YAAaN,EAAEG,OAAOD,OACrE2B,SAAU3B,EAAM9B,eAElBqC,EAAAA,EAAAA,KAAA,QAAAE,SAAM,QACNF,EAAAA,EAAAA,KAAA,SACEsB,KAAK,OACLrB,UAAU,aACVR,MAAOA,EAAM5B,QACbiD,SAAWvB,GAAMK,EAAyBC,EAAK,UAAWN,EAAEG,OAAOD,OACnE2B,SAAU3B,EAAM9B,mBAzBdkC,EA6BJ,QAKVG,EAAAA,EAAAA,KAAA,UAAQsB,KAAK,SAASrB,UAAU,eAAe4B,SAAUhF,EAAQqD,SAC9DrD,GAAUmD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAO,IAAM,iBAIvB,ECjPV,EAVoBC,KAEhB5B,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA9B,SAAA,EACEF,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,KACPjC,EAAAA,EAAAA,KAACtD,EAAW,IAAG,KACfsD,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,M","sources":["components/DoctorApply.jsx","pages/ApplyDoctor.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\nimport Loading from \"./Loading\";\nimport \"../styles/doctorapply.css\";\n\nconst DoctorApply = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [clinics, setClinics] = useState([]);\n  const [formDetails, setFormDetails] = useState({\n    specialization: \"\",\n    experience: 0, // Experience as a number\n    feePerConsultation: 0,\n    clinicId: \"\", // Will store the clinic ID\n    clinicName: \"\", // Will store the clinic name for display\n    availability: {\n      monday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      tuesday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      wednesday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      thursday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      friday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      saturday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n      sunday: { isAvailable: false, startTime: \"\", endTime: \"\" },\n    },\n    timings: [9, 18], // Default timings\n  });\n\n  // Fetch available clinics\n  useEffect(() => {\n    const fetchClinics = async () => {\n      try {\n        const response = await axios.get(\"/clinic/all\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        });\n\n        // Check if the response contains the expected data\n        if (response.data && response.data.success && Array.isArray(response.data.data)) {\n          setClinics(response.data.data); // Set clinics from response.data.data\n        } else {\n          console.error(\"Invalid response structure:\", response.data);\n          toast.error(\"Failed to fetch clinics: Invalid response structure\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching clinics:\", error);\n        toast.error(\"Failed to fetch clinics\");\n      }\n    };\n\n    fetchClinics();\n  }, []);\n\n  // Handle input changes for text, number, and select fields\n  const inputChange = (e) => {\n    const { name, value } = e.target;\n    setFormDetails((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle clinic selection by name and store the corresponding ID\n  const handleClinicSelection = (e) => {\n    const selectedClinicName = e.target.value;\n    const selectedClinic = clinics.find((clinic) => clinic.name === selectedClinicName);\n\n    if (selectedClinic) {\n      setFormDetails((prev) => ({\n        ...prev,\n        clinicId: selectedClinic._id, // Store the clinic ID\n        clinicName: selectedClinic.name, // Store the clinic name for display\n      }));\n    } else {\n      setFormDetails((prev) => ({\n        ...prev,\n        clinicId: \"\",\n        clinicName: \"\",\n      }));\n    }\n  };\n\n  // Handle changes for availability (checkboxes and time inputs)\n  const handleAvailabilityChange = (day, field, value) => {\n    setFormDetails((prev) => ({\n      ...prev,\n      availability: {\n        ...prev.availability,\n        [day]: {\n          ...prev.availability[day],\n          [field]: field === \"isAvailable\" ? value.target.checked : value,\n        },\n      },\n    }));\n  };\n\n  // Handle form submission\n  const formSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      // Validate required fields\n      const { specialization, experience, feePerConsultation, clinicId, availability, timings } = formDetails;\n      if (!specialization || !experience || !feePerConsultation || !clinicId || !timings) {\n        toast.error(\"All fields are required\");\n        return;\n      }\n\n      // Validate availability timings\n      const isValidAvailability = Object.values(availability).every((day) => {\n        if (day.isAvailable) {\n          return day.startTime && day.endTime;\n        }\n        return true;\n      });\n\n      if (!isValidAvailability) {\n        toast.error(\"Please provide valid timings for available days\");\n        return;\n      }\n\n      // Submit the form data\n      const res = await axios.post(\n        \"/doctor/register\",\n        {\n          ...formDetails,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      );\n\n      if (res.data.success) {\n        toast.success(res.data.message);\n        navigate(\"/\"); // Redirect to home page after successful submission\n      } else {\n        toast.error(res.data.message);\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      toast.error(error.response?.data?.message || \"Something went wrong\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <section className=\"apply-doctor-section flex-center\">\n  <div className=\"apply-doctor-container flex-center\">\n    <h2 className=\"form-heading\">Apply as a Doctor</h2>\n    <form onSubmit={formSubmit} className=\"register-form\">\n      {/* Clinic Selection */}\n      <div className=\"form-group\">\n        <label>Select Clinic</label>\n        <select\n          name=\"clinicName\"\n          value={formDetails.clinicName}\n          onChange={handleClinicSelection}\n          className=\"form-input\"\n          required\n        >\n          <option value=\"\">Select a clinic</option>\n          {clinics.map((clinic) => (\n            <option key={clinic._id} value={clinic.name}>\n              {clinic.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Professional Information */}\n      <div className=\"form-group\">\n        <label>Specialization</label>\n        <input\n          type=\"text\"\n          name=\"specialization\"\n          className=\"form-input\"\n          placeholder=\"Enter your specialization\"\n          value={formDetails.specialization}\n          onChange={inputChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label>Experience (years)</label>\n        <input\n          type=\"number\"\n          name=\"experience\"\n          className=\"form-input\"\n          placeholder=\"Enter your experience in years\"\n          value={formDetails.experience}\n          onChange={inputChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label>Fee per Consultation</label>\n        <input\n          type=\"number\"\n          name=\"feePerConsultation\"\n          className=\"form-input\"\n          placeholder=\"Enter your fee per consultation\"\n          value={formDetails.feePerConsultation}\n          onChange={inputChange}\n          required\n        />\n      </div>\n\n      {/* Availability Section */}\n      <div className=\"availability-section\">\n        <h3>Availability</h3>\n        {Object.entries(formDetails.availability).map(([day, value]) => (\n          <div key={day} className=\"day-availability\">\n            <div className=\"day-header\">\n              <input\n                type=\"checkbox\"\n                className=\"form-checkbox\"\n                checked={value.isAvailable}\n                onChange={(e) => handleAvailabilityChange(day, \"isAvailable\", e)}\n              />\n              <label>{day.charAt(0).toUpperCase() + day.slice(1)}</label>\n            </div>\n            {value.isAvailable && (\n              <div className=\"time-inputs\">\n                <input\n                  type=\"time\"\n                  className=\"form-input\"\n                  value={value.startTime}\n                  onChange={(e) => handleAvailabilityChange(day, \"startTime\", e.target.value)}\n                  required={value.isAvailable}\n                />\n                <span>to</span>\n                <input\n                  type=\"time\"\n                  className=\"form-input\"\n                  value={value.endTime}\n                  onChange={(e) => handleAvailabilityChange(day, \"endTime\", e.target.value)}\n                  required={value.isAvailable}\n                />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Submit Button */}\n      <button type=\"submit\" className=\"btn form-btn\" disabled={loading}>\n        {loading ? <Loading /> : \"Apply\"}\n      </button>\n    </form>\n  </div>\n</section>\n  );\n};\n\nexport default DoctorApply;","import React from \"react\";\nimport \"../styles/contact.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport DoctorApply from \"../components/DoctorApply\"; // Import the DoctorApply component\n\nconst ApplyDoctor = () => {\n  return (\n    <>\n      <Navbar />\n      <DoctorApply /> {/* Render the DoctorApply component */}\n      <Footer />\n    </>\n  );\n};\n\nexport default ApplyDoctor;"],"names":["DoctorApply","navigate","useNavigate","loading","setLoading","useState","clinics","setClinics","formDetails","setFormDetails","specialization","experience","feePerConsultation","clinicId","clinicName","availability","monday","isAvailable","startTime","endTime","tuesday","wednesday","thursday","friday","saturday","sunday","timings","useEffect","async","response","axios","get","headers","Authorization","localStorage","getItem","data","success","Array","isArray","console","error","toast","fetchClinics","inputChange","e","name","value","target","prev","handleAvailabilityChange","day","field","checked","_jsx","className","children","_jsxs","onSubmit","preventDefault","Object","values","every","res","post","message","_error$response","_error$response$data","onChange","selectedClinicName","selectedClinic","find","clinic","_id","required","map","type","placeholder","entries","_ref","charAt","toUpperCase","slice","disabled","Loading","ApplyDoctor","_Fragment","Navbar","Footer"],"sourceRoot":""}